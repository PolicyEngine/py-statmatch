name: PR - Code Changes

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - '.github/workflows/**'
      - 'tests/**'

jobs:
  check_fork:
    runs-on: ubuntu-latest
    steps:
      - name: Check for external fork
        if: github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "::error::This workflow does not support pull requests from forks."
          echo "::error::Please create a branch in the main repository instead."
          exit 1

  lint:
    needs: check_fork
    uses: ./.github/workflows/reusable_lint.yaml

  test:
    needs: check_fork
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    uses: ./.github/workflows/reusable_test.yaml
    with:
      os: ${{ matrix.os }}
      python-version: ${{ matrix.python-version }}

  smoke_test:
    needs: check_fork
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install package
        run: pip install -e .
      
      - name: Test import
        run: |
          python -c "from statmatch import nnd_hotdeck; print('Import successful')"
  
  documentation_test:
    needs: check_fork
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      
      - name: Install documentation dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[documentation]"
      
      - name: Build documentation test
        run: |
          cd docs
          jupyter-book build .
      
      - name: Check documentation output
        run: |
          if [ ! -d "docs/_build/html" ]; then
            echo "::error::Documentation build failed - no output directory"
            exit 1
          fi
          echo "Documentation built successfully"
  
  versioning_test:
    needs: check_fork
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      
      - name: Install yaml-changelog
        run: |
          pip install --upgrade pip
          pip install yaml-changelog
      
      - name: Test changelog command
        run: |
          # Test that yaml-changelog works
          which yaml-changelog
          yaml-changelog --help
          
          # Test that version extraction works
          VERSION=$(python -c "import re; content=open('changelog.yaml').read(); match=re.search(r'version: ([\d.]+)', content); print(match.group(1) if match else '0.1.0')")
          echo "Current version: $VERSION"
          
          # Test sed commands work
          echo "Testing sed commands..."
          cp pyproject.toml pyproject.toml.bak
          sed -i "s/^version = .*/version = \"99.99.99\"/" pyproject.toml
          if ! grep -q 'version = "99.99.99"' pyproject.toml; then
            echo "::error::sed command for pyproject.toml failed"
            exit 1
          fi
          mv pyproject.toml.bak pyproject.toml
          
          echo "Versioning tools working correctly"